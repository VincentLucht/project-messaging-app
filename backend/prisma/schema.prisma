// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_LOCAL")
}

model User {
  id                  String        @id @default(uuid())
  name                String        @db.VarChar(30)
  username            String        @unique @db.VarChar(30)
  password            String
  user_description    String        @default("Hi!") @db.VarChar(30)
  created_at          DateTime      @default(now())
  profile_picture_url String?
  Messages            Message[]
  UserChats           UserChats[]
  ChatAdmin           ChatAdmin[]
  MessageRead         MessageRead[]
  OwnedChats          Chat[]
}

model Chat {
  id                    String      @id @default(uuid())
  name                  String      @db.VarChar(100)
  time_created          DateTime    @default(now())
  profile_picture_url   String?
  is_group_chat         Boolean     @default(false)
  chat_description      String?     @db.VarChar(200)
  updated_at            DateTime    @updatedAt
  last_message_id       String?     @unique
  owner_id              String
  owner                 User        @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  last_message          Message?    @relation("LastMessage", fields: [last_message_id], references: [id], onDelete: SetNull)
  Messages              Message[]   @relation("ChatMessages")
  UserChats             UserChats[]
  ChatAdmins            ChatAdmin[]

  @@index([updated_at])
}

model Message {
  id                String        @id @default(uuid())
  content           String        @db.VarChar(10000)
  time_created      DateTime      @default(now())
  user              User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id           String
  is_system_message Boolean       @default(false)
  chat              Chat          @relation("ChatMessages", fields: [chat_id], references: [id], onDelete: Cascade)
  chat_id           String
  last_message_chat Chat?         @relation("LastMessage")
  MessageRead       MessageRead[]

  @@index([chat_id, time_created])
  @@index([chat_id, user_id])
}

model MessageRead {
  id         String   @id @default(uuid())
  message    Message  @relation(fields: [message_id], references: [id], onDelete: Cascade)
  message_id String
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    String
  read_at    DateTime @default(now())

  @@unique([message_id, user_id])
  @@index([user_id, read_at])
}

model UserChats {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id   String
  chat      Chat     @relation(fields: [chat_id], references: [id], onDelete: Cascade)
  chat_id   String
  joined_at DateTime @default(now())

  @@unique([user_id, chat_id])
}

model ChatAdmin {
  id      String @id @default(uuid())
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String
  chat    Chat   @relation(fields: [chat_id], references: [id], onDelete: Cascade)
  chat_id String

  @@unique([user_id, chat_id])
}
