// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_LOCAL")
}

model User {
  id               String      @id @default(uuid())
  name             String      @db.VarChar(30)
  username         String      @unique @db.VarChar(30)
  password         String
  user_description String      @default("Hi!") @db.VarChar(30)
  created_at       DateTime    @default(now())
  Messages         Message[]
  UserChats        UserChats[]
  ChatAdmin        ChatAdmin[]
}

model Chat {
  id                    String      @id @default(uuid())
  name                  String      @db.VarChar(100)
  is_password_protected Boolean     @default(false)
  password              String?
  time_created          DateTime    @default(now())
  is_group_chat         Boolean     @default(false)
  chat_description      String?     @db.VarChar(200)
  updated_at            DateTime    @updatedAt
  Messages              Message[]
  UserChats             UserChats[]
  ChatAdmins            ChatAdmin[]
}

model Message {
  id           String   @id @default(uuid())
  content      String   @db.VarChar(10000)
  time_created DateTime @default(now())
  status       String   @default("sent")
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id      String
  chat         Chat     @relation(fields: [chat_id], references: [id], onDelete: Cascade)
  chat_id      String
}

model UserChats {
  id      String @id @default(uuid())
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String
  chat    Chat   @relation(fields: [chat_id], references: [id], onDelete: Cascade)
  chat_id String

  @@unique([user_id, chat_id])
  @@index([user_id, chat_id])
}

model ChatAdmin {
  id      String @id @default(uuid())
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String
  chat    Chat   @relation(fields: [chat_id], references: [id], onDelete: Cascade)
  chat_id String

  @@unique([user_id, chat_id])
  @@index([user_id, chat_id])
}
